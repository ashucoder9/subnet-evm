// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package md5

import (
	"fmt"
	"crypto/md5"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/allowlist"
	"github.com/ava-labs/subnet-evm/precompile/contract"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	// This contract also uses AllowList precompile.
	// You should also increase gas costs of functions that read from AllowList storage.
	Md5HashGasCost uint64 = contract.ReadGasCostPerSlot /* SET A GAS COST HERE */
)
// Singleton StatefulPrecompiledContract and signatures.
var (

	// Md5RawABI contains the raw ABI of Md5 contract.
	//go:embed contract.abi
	Md5RawABI string

	Md5ABI = contract.ParseABI(Md5RawABI)

	Md5Precompile = createMd5Precompile()
)

// GetMd5AllowListStatus returns the role of [address] for the Md5 list.
func GetMd5AllowListStatus(stateDB contract.StateDB, address common.Address) allowlist.Role {
	return allowlist.GetAllowListStatus(stateDB, ContractAddress, address)
}

// SetMd5AllowListStatus sets the permissions of [address] to [role] for the
// Md5 list. Assumes [role] has already been verified as valid.
// This stores the [role] in the contract storage with address [ContractAddress]
// and [address] hash. It means that any reusage of the [address] key for different value
// conflicts with the same slot [role] is stored.
// Precompile implementations must use a different key than [address] for their storage.
func SetMd5AllowListStatus(stateDB contract.StateDB, address common.Address, role allowlist.Role) {
	allowlist.SetAllowListRole(stateDB, ContractAddress, address, role)
}

// UnpackMd5HashInput attempts to unpack [input] into the string type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackMd5HashInput(input []byte) (string, error) {
	res, err := Md5ABI.UnpackInput("md5Hash", input)
	if err != nil {
		return "", err
	}
	unpacked := *abi.ConvertType(res[0], new(string)).(*string)
	return unpacked, nil
}

// PackMd5Hash packs [input] of type string into the appropriate arguments for md5Hash.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackMd5Hash(input string) ([]byte, error) {
	return Md5ABI.Pack("md5Hash", input)
}

// PackMd5HashOutput attempts to pack given result of type [16]byte
// to conform the ABI outputs.
func PackMd5HashOutput(result [16]byte) ([]byte, error) {
	return Md5ABI.PackOutput("md5Hash", result)
}

func md5Hash(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, Md5HashGasCost); err != nil {
		return nil, 0, err
	}

	inputStruct, err := UnpackMd5HashInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	data := []byte(inputStruct)
	var output [16]byte
	output = md5.Sum(data)
	packedOutput, err := PackMd5HashOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	return packedOutput, remainingGas, nil
}

// createMd5Precompile returns a StatefulPrecompiledContract with getters and setters for the precompile.
// Access to the getters/setters is controlled by an allow list for ContractAddress.
func createMd5Precompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction
	functions = append(functions, allowlist.CreateAllowListFunctions(ContractAddress)...)

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"md5Hash": md5Hash,
	}

	for name, function := range abiFunctionMap {
		method, ok := Md5ABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
